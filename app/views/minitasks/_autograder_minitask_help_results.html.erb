<!-- Snap Autograding Menu -->
<style type="text/css">
  .container {
    /*border: 1px solid #ccc;*/
    text-align: center;
  }

  .star {
    text-align: center;
    font-size: 14px;
    color: whitesmoke;
    /*text-decoration-color: seashell;*/
    display: inline-block;
    width: 90px;
    height: 90px;
    margin: 5px;
  }

  .star img {
    width: 90px;
    height: 90px;
  }

  .description {
    display: none;
  }

  .description-table {
    /*display: none;*/
    text-align: center;
    font-size: 14px;
    color: whitesmoke;
  }
  .star:hover .description-table {
    display: block;
    text-align: center;
    font-size: 14px;
    color: whitesmoke;
  }

  /*body{*/
  /*font-size: 20px;*/
  /*font-family: sans-serif;*/
  /*color: #333;*/
  /*}*/


  @import url(https://fonts.googleapis.com/css?family=Work+Sans:300,600);

  /*body{*/
  /*font-size: 20px;*/
  /*font-family: 'Work Sans', sans-serif;*/
  /*color: #333;*/
  /*font-weight: 300;*/
  /*text-align: center;*/
  /*background-color: #f8f6f0;*/
  /*}*/
  h1{
    font-weight: 300;
    margin: 0px;
    padding: 10px;
    font-size: 20px;
    background-color: #444;
    color: #fff;
  }
  .question{
    color: whitesmoke;
    font-size: 30px;
    margin-bottom: 10px;
  }
  .answers {
    color: whitesmoke;
    margin-bottom: 20px;
    text-align: left;
    display: inline-block;
  }
  .answers label{
    color: whitesmoke;
    display: block;
    margin-bottom: 10px;
  }
  button{
    font-family: 'Work Sans', sans-serif;
    font-size: 22px;
    background-color: #279;
    color: #fff;
    border: 0px;
    border-radius: 3px;
    padding: 20px;
    cursor: pointer;
    margin-bottom: 20px;
  }
  button:hover{
    background-color: #38a;
  }

  .overlay{
    position:absolute;
  }
  /*#ag-output{*/
    /*z-index: 1;*/
  /*}*/

  #close {
    position: absolute;
    background: #ff5763;
    color: white;
    top: 0px;
    right: -10px;
  }

</style>

<!--<div id="quiz"></div>-->
<!--<button id="submit">Submit Quiz</button>-->
<!--<div id="results"></div>-->



<div class="overlay hidden" id="ag-output">
  <!--<div class = 'quiz' id = 'quiz'> </div>-->
  <!--<div class = 'results' id = 'results'> </div>-->

  <div class="popup-content" id="ag-results">
    <br>
    <br>
    <br>
    <br>
    <p id="comment"></p>
  </div>
</div>

<script>
    populateQuiz = function() {
        var i, j, x;

        var comment = document.getElementById("comment");
        comment.innerHTML = "";

        while (comment.nextSibling) {
            document.getElementById("ag-results").removeChild(comment.nextSibling);
        }

        quiz = document.createElement('div');
        quiz.id = 'quiz';
        results = document.createElement('div');
        results.id = 'results';
        submitButton = document.createElement('button');
        submitButton.id = "submit";
        submitButton.innerHTML = 'Submit';
        closeButton = document.createElement('button');
        closeButton.id = "close";
        closeButton.innerHTML = 'X';
        // nextButton = document.createElement('button');
        // nextButton.id = "next";
        // nextButton.innerHTML = 'nextButton';

        $("#ag-results").append(quiz);
        $("#ag-results").append(results);
        $("#ag-results").append(submitButton);
        $("#ag-results").append(closeButton);
        // $("#ag-results").append(previouButton);
        // $("#ag-results").append(nextButton);

        (function() {
            function buildQuiz() {
                // we'll need a place to store the HTML output
                const output = [];

                // for each question...
                myQuestions.forEach((currentQuestion, questionNumber) => {
                    // we'll want to store the list of answer choices
                    const answers = [];
                    ;

                    // and for each available answer...
                    for (letter in currentQuestion.answers) {
                        // ...add an HTML radio button
                        answers.push(
                            `<label>
            <input type="radio" name="question${questionNumber}" value="${letter}">
            ${letter} :
            ${currentQuestion.answers[letter]}
          </label>`
                        );
                    }

                    // add this question and its answers to the output
                    output.push(
                        `<div class="question"> ${currentQuestion.question} </div>
        <div class="answers"> ${answers.join("")} </div>`
                    );
                });

                // finally combine our output list into one string of HTML and put it on the page
                quizContainer.innerHTML = output.join("");
            }

            function showResults() {
                // gather answer containers from our quiz
                const answerContainers = quizContainer.querySelectorAll(".answers");

                // keep track of user's answers
                let numCorrect = 0;

                // for each question...
                myQuestions.forEach((currentQuestion, questionNumber) => {
                    // find selected answer
                    const answerContainer = answerContainers[questionNumber];
                    const selector = `input[name=question${questionNumber}]:checked`;
                    const userAnswer = (answerContainer.querySelector(selector) || {}).value;
                    Trace.log(userAnswer.toString());
                    // if answer is correct
                    if (userAnswer === currentQuestion.correctAnswer) {
                        // add to the number of correct answers
                        numCorrect++;
                        alert("Correct! Congratulations!");
                        // color the answers green
                        ;
                        next_subtask = document.getElementById('next-subtask');
                        if (next_subtask == null) {
                            divTest = $('<div>')
                                .html("<%= escape_javascript link_to(image_tag("next.png"),  minitask_path(@nextminitask.id), {class: 'nextminitask', id: "next-subtask" }) %>")
                            ;
                            $("#ag-results").append(divTest);
                        }

                    } else {
                        // if answer is wrong or blank
                        alert("Wrong Answer, please try again");
                        answerContainers[questionNumber].style.color = "red";
                        // resultsContainer.innerHTML = `Wrong!`;

                    }
                });
                // resultsContainer.innerHTML = `Correct!`
                // show number of correct answers out of total
                // Trace.log(resultsContainer);
                // closePopup()
            }

            const quizContainer = document.getElementById("quiz");
            const resultsContainer = document.getElementById("results");
            const submitButton = document.getElementById("submit");
            const closeButton = document.getElementById("close");
            <% if @quiz%>
              const myQuestions = [
                  {
                      question: "<%= @quiz.quizbody%>",
                      answers: {
                          a: "<%= @options[0].optionbody.html_safe%>",
                          b: "<%= @options[1].optionbody.html_safe%>",
                          c: "<%= @options[2].optionbody.html_safe%>"
                      },
                      correctAnswer:  "<%= @quiz.solution%>"
                  },
              ];
            <% else%>
            const myQuestions = []
            <% end%>
                // }


            // display quiz right away
            buildQuiz();

            // on submit, show results
            submitButton.addEventListener("click", showResults);
            closeButton.addEventListener("click", closePopup);
        })();

    };



    populateFeedback = function(feedbackLog, allFeedback, chunknum, tipnum) {
        var i, j, x;

        var comment = document.getElementById("comment");
        comment.innerHTML = "";

        while (comment.nextSibling) {
            document.getElementById("ag-results").removeChild(comment.nextSibling);
        }


        closeButton = document.createElement('button');
        closeButton.id = "close";
        closeButton.innerHTML = 'X';
        $("#ag-results").append(closeButton);
        const closeButton = document.getElementById("close");

        closeButton.addEventListener("click", closePopup);






        var log = feedbackLog;
        var chunks = log.chunk_list;
        var linebreak = document.createElement("br");
        var numtips = 0;
        var chunkHasCorrectTip = false;
        var tipHasCorrectTest = false;

        var tipsDiv = document.getElementById("numtips");

        ['correct', 'incorrect'].forEach(createCorrectIncorrectGrouping);


        var correct_total = 0;
        var incorrect_total = 0;
        var correct_feedbacks = [];
        var incorrect_feedbacks = [];
        for (i = 0; i < chunks.length; i++) {
            console.log("chunks.length", chunks.length);
            var chunk = chunks[i];

            var chunkPoints = "";
            if (showPoints) {
                chunkPoints = " ({0} possible {1}) ".format(
                    chunk.totalPoints, pluralize('point', chunk.totalPoints));
            }

            var tips = chunk.tip_list;


            var header = document.createElement("p");
            header.innerHTML = chunk.chunk_title + chunkPoints + '<br><br>';

            header.classList.add("chunk-header", "chunk" + i);

            var correct_chunk = header.cloneNode(true);
            correct_chunk.classList.add("correct-chunk" + i);

            if (chunk.allCorrect) {
                // document.getElementById("correct-section").style.display = "block";
                document.getElementById("correct-section").appendChild(correct_chunk);
            } else {
                var incorrect_chunk = header.cloneNode(true);
                incorrect_chunk.classList.add("incorrect-chunk" + i);
                // document.getElementById("incorrect-section").style.display = "block";
                document.getElementById("incorrect-section").appendChild(incorrect_chunk);
            }

            var allFeedback = allFeedback !== undefined ? allFeedback : false;
            var currRank = 1;
            console.log("tips: ", tips);
            // tipLoop:
            // TODO: Document this

            // for (x = 0; x < tips.length; x++) {
            x = 0;
            console.log('x', x, 'tips.length', tips.length);
            var tip = tips[x];
            var label_class = "incorrectans";
            var div = document.createElement("div");
            var current_chunk = document.getElementsByClassName("incorrect-chunk" + i)[0];
            if (tip.allCorrect) {
                correct_total += 1;
                // document.getElementById("correct-section").style.display = "block";
                document.getElementById("correct-section").appendChild(correct_chunk);
                current_chunk = document.getElementsByClassName("correct-chunk" + i)[0];
                label_class = "correctans";
                var suggestion = tip.complement;
            } else {
                incorrect_total += 1;
                numtips += 1;
                var suggestion = tip.suggestion;
            }

            var tipPoints = "";

            // TODO: Clean this up
            // TODO: Use a button and bootstrap collapse.
            div.innerHTML = '<input class="details" id="expander' + i + x + '" type="checkbox" ><label class="' + label_class + '" for="expander' + i + x + '">' + tipPoints + suggestion + '</label><div id="table-wrapper' + i + x + '">';

            current_chunk.appendChild(div);
            var details = document.getElementById("table-wrapper" + i + x);
            details.previousSibling.click();
            var allTests = tip.test_list;
            appendElement(
                "p",
                "",
                ["inner-titles", "observations" + i + x],
                details
            );
            j = 0;
            // for (j = 0; j < allTests.length; j++) {
            // console.log('alltests.length', allTests.length);
            var newRow = document.createElement("tr");
            var thisTest = allTests[j];
            var testPoints = showPoints ? "({0}) ".format(
                pluralizeWithNum('point', thisTest.points)
            ) : '';

            if (thisTest.testClass !== "r") {
                if (document.getElementsByClassName("observations-section" + i + x[0]) !== []) {
                    incorrect_assertions = 0;
                    correct_assertions = 0;
                    appendElement(
                        "div",
                        "",
                        ["results", "observations-section" + i + x],
                        document.getElementsByClassName("observations" + i + x)[0]
                    );
                }

                if (!tip.allCorrect && thisTest.correct) {
                    tipHasCorrectTest = true;
                    if (!document.getElementById("correct-tip" + i + x)) {
                        // TODO: What's this for?
                    }
                }

                if (thisTest.correct) {
                    correct_feedbacks.push(thisTest.feedback);
                    correct_assertions += 1;
                    // TODO: Consider removing this conditional and always showing the test.
                    if (allFeedback || tip.allCorrect) {
                        appendElement(
                            "p",
                            "✔",
                            "data",
                            document.getElementsByClassName("observations-section" + i + x)[0]
                        );
                        appendElement(
                            "p",
                            testPoints + "Tests Passed! " + thisTest.feedback,
                            ["data", "assertion"],
                            document.getElementsByClassName("observations-section" + i + x)[0]
                        );
                        appendElement(
                            "br",
                            null,
                            null,
                            document.getElementsByClassName("observations-section" + i + x)[0]
                        );
                    }
                } else {
                    incorrect_feedbacks.push(thisTest.feedback);
                    // Non-r class failing cases.
                    appendElement(
                        "p",
                        "✖",
                        "data",
                        document.getElementsByClassName("observations-section" + i + x)[0]
                    );
                    incorrect_assertions += 1;
                    appendElement(
                        "p",
                        testPoints + thisTest.feedback,
                        ["data", "assertion"],
                        document.getElementsByClassName("observations-section" + i + x)[0]
                    );
                    appendElement(
                        "br",
                        null,
                        null,
                        document.getElementsByClassName("observations-section" + i + x)[0]
                    );
                }
            } else { // TESTS WITH CLASS 'r'
                if (document.getElementsByClassName("tests-section" + i + x[0]) !== []) {
                    incorrect_tests = 0;
                    correct_tests = 0;
                    appendElement(
                        "div",
                        "",
                        ["results", "tests-section" + i + x],
                        document.getElementsByClassName("observations" + i + x)[0]
                    );
                }
                if (thisTest.correct && !tip.allCorrect) {
                    tipHasCorrectTest = true;
                    if (!document.getElementById("correct-tip" + i + x)) {
                        // TODO: This?
                    }
                }

                if (thisTest.correct) {
                    correct_tests += 1;
                } else {
                    incorrect_tests += 1;
                }

                var htmlString, string_reporter, testSectionDiv;

                string_reporter = document.createElement("div")
                string_reporter.classList.add("data", "assertion");

                // TODO: Try extracting this out.
                if (thisTest.correct) {
                    // TODO: FIX THE CSS LIST HERE
                    // passing-test-case is used for the show/hide button
                    if (allFeedback || tip.allCorrect) {
                        appendElement(
                            "p",
                            "✔",
                            ["data", "passing-test-case"],
                            document.getElementsByClassName("tests-section" + i + x)[0]
                        );
                        // TODO Clean these strings up.
                        var input = thisTest.input;
                        if (input instanceof List || input instanceof Array) {
                            input = arrayFormattedString(input);
                        }

                        htmlString = [
                            '<p class="data assertion">',
                            testPoints + thisTest.feedback,
                            ' The input: <code class="data assertion">',
                            input,
                            '</code>'
                        ].join('');
                        if (thisTest.expOut.constructor !== Function) {
                            var expOut = thisTest.expOut;
                            if (expOut instanceof List || expOut instanceof Array) {
                                expOut = arrayFormattedString(expOut);
                            }
                            htmlString += [
                                '<p class="data assertion">, returned the',
                                ' expected value: <code class="data assertion">',
                                expOut,
                                '</code></p>'
                            ].join('');
                        } else {
                            htmlString += '<p class="data assertion">passed the tests.</p>';
                        }
                        // TODO: Make a block ==> image call here!
                        string_reporter.innerHTML = htmlString;
                        // TODO: Clean up this...
                        document.getElementsByClassName(
                            "tests-section" + i + x
                        )[0].appendChild(string_reporter);
                        appendElement(
                            "br",
                            null,
                            null,
                            document.getElementsByClassName("tests-section" + i + x)[0]
                        );
                    }
                } else {
                    appendElement(
                        "p",
                        "✖",
                        "data",
                        document.getElementsByClassName("tests-section" + i + x)[0]
                    );

                    string_reporter.classList.add("data", "assertion");
                    // TODO Clean these strings up.
                    var input = thisTest.input;
                    if (input instanceof List || input instanceof Array) {
                        input = arrayFormattedString(input);
                    }

                    htmlString = [
                        '<p class="data assertion">',
                        testPoints + thisTest.feedback,
                        'The input: <code>',
                        input,
                        '</code></p> '
                    ].join('');

                    // Don't show "expected output" if the output check is
                    // a custon JS function (where no output type is known.)
                    if (thisTest.expOut && thisTest.expOut.constructor !== Function) {
                        var expOut = thisTest.expOut;
                        if (expOut instanceof List || expOut instanceof Array) {
                            expOut = arrayFormattedString(expOut);
                        }
                        htmlString += [
                            '<p class="data assertion">did <em>not</em> return the',
                            ' expected value: ',
                            '<code>', expOut, '</code></p>'
                        ].join('');
                    }
                    if (thisTest.output === null) {
                        htmlString += [
                            '<p class="data assertion"> did <em>not</em> return the expected value.</p>',
                            ''
                        ].join('');
                        htmlString += '<p class="data assertion"> Instead it returned no output.</p>';
                    } else {
                        var output = thisTest.output;
                        if (output instanceof List || output instanceof Array) {
                            output = arrayFormattedString(output);
                        }
                        htmlString += '<p class="data assertion">output: <code>' + output + '</code></p>';
                    }
                    string_reporter.innerHTML = htmlString;
                    document.getElementsByClassName(
                        "tests-section" + i + x
                    )[0].appendChild(string_reporter);

                    appendElement(
                        "br",
                        null,
                        null,
                        document.getElementsByClassName("tests-section" + i + x)[0]
                    );
                } // 'r' test cases
            } // end adding test div

            if (tip.rank === currRank || tip.rank !== 0) {
                // TODO: document this....
                if (!tip.allCorrect) {
                    // break tipLoop;
                } else {
                    currRank += 1;
                }
            }
        }
        console.log('correct_total', correct_total);
        console.log('incorrect_total', incorrect_total);
        console.log('correct_feedback', correct_feedbacks);
        console.log('incorrect_feedback', incorrect_feedbacks);


        stars = document.createElement('div');
        stars.className = ('container');
        stars.id = 'stars';
        $("#ag-results").append(stars);

        for(i = 0; i < correct_total; i++){
            star = $('<div>')
                .html("<%= escape_javascript image_tag('star.jpg') %>").addClass('star');
            var data = document.createElement('p');
            data.innerHTML = correct_feedbacks[i];
            data.className = 'description';
            star.append(data);
            $("#stars").append(star);

        }

        for(i = 0; i < incorrect_total; i++){
            unstar = $('<div>')
                .html("<%= escape_javascript image_tag('unstar.jpg') %>").addClass('star');
            var data = document.createElement('p');
            data.innerHTML = incorrect_feedbacks[i];
            data.className = 'description';
            unstar.append(data);
            $("#stars").append(unstar);

        }

        var description_table = document.createElement('p');
        description_table.innerHTML = "<span><\span>";
        description_table.className = 'description-table';
        description_table.id = 'description-table';

        $("#ag-results").append(description_table);

        $( "div.star" )
            .mouseenter(function() {
                description = this.children[1].innerHTML;
                console.log(description);
                $( "#description-table" ).find( "span" ).html( description);
            })
            .mouseleave(function() {
                $(  "#description-table"  ).find( "span" ).text();
            });

        <!--        star = $('<div>')-->
        <!--            .html("<%= escape_javascript image_tag('star.jpg') %> <p>text<p> <p class = 'description'> description <p>").addClass('star');-->
        // star.id = 'star';
        // star.html("<p>text<\p>");
        // star.className = 'star';
        unstar = $('<div>')
            .html("<%= escape_javascript image_tag('unstar.jpg') %>").addClass('star');
        // unstar.className = 'unstar';
        if (numtips == 0) {
            divTest = $('<div>')
                .html("<%= escape_javascript button_to('Next Subtask',  minitask_path(@nextminitask), {class: 'nextminitask'}) %>")
            ;
            $("#ag-results").append(divTest);

        }

        // $("#stars").append(star);
        // $("#stars").append(unstar);
        // TODO Make a function for this.
        tipsDiv.innerHTML = '<span class="badge">{0}</span>'.format(numtips) + pluralize('tip', numtips);

        if (tipHasCorrectTest) {
            $(SELECT.toggle_correct_button).show();
        }

        openResults();
    };
</script>

