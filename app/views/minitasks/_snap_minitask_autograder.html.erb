<style>
  body {
    background-color: linen;
  }

  h1 {
    color: maroon;
    /*margin-left: 15px;*/
    word-wrap: break-word;
  }
  #bottom-right{
    position: absolute;
    z-index: 1;
    color: whitesmoke;
    font-size: 18px;
    margin: 15px;
    overflow: visible;
  }


  iframe {
    margin-top: 20px;
    border: 0
  }
</style>

<% content_for :head do %>
  <!-- NOTE: jQuery and _ are included in the Rails App  -->

  <!--  <script src='/autograder/ag-files/MiniTaskPopulate.js'></script>-->
  <!-- AG Snap Modifications -->
  <script src="/snap-path.js"></script>
  <script src="/autograder/ag-files/snap-ui-overrides.js"></script>

  <!-- Autograder custom display -->
  <link rel="stylesheet" type="text/css" href="/autograder/ag-files/AG_status_bar.css" />
  <link rel="stylesheet" type="text/css" href="/autograder/ag-files/hintstyle.css" />

  <!-- Main autograder components -->

  <script src='/autograder/ag-files/ag-util.js'></script>
  <script src='/autograder/ag-files/help-content.js'></script>
  <script src='/autograder/ag-files/spriteEventLog.js'></script>
  <script src='/autograder/ag-files/scriptAnalysis.js'></script>
  <script src='/autograder/ag-files/scriptMinitaskAnalysis.js'></script>

  <script src="/autograder/ag-files/AGMiniTaskAgent.js"></script>
  <script src='/autograder/ag-files/feedbackLog.js'></script>
  <script src="/autograder/ag-files/AGMiniTaskFormatting.js"></script>
  <!--  <script src="/autograder/ag-files/task-script.js"></script>-->


  <!-- Custom cloud access on localhost only. -->
  <% if Rails.env == 'development' %>
    <script src="/autograder/ag-files/snap-local-cloud.js"></script>
  <% end %>


  <body>
  <!--here is the content-->
  <!--<div id="left"><h1>Test</h1></div>-->

  </body>

  <!-- Load snap + AG additions, similar to snap.html -->
  <script>

      // Override Snap! / Morphic method to not take the full size of the window.
      // TODO: extract into AG function that builds this.
      // It should take in a width and height.
      WorldMorph.prototype.fillPage = function () {
          console.log('worldmorph fill page');
          var agHeight = $('#ag-header1').outerHeight() + $('#ag-header2').outerHeight();

          clientHeight = $(window).height() - agHeight,
              clientWidth = window.innerWidth,
              myself = this;

          // this.worldCanvas.style.position = "absolute";
          this.worldCanvas.style.position = "relative";
          this.worldCanvas.style.left = '0px';
          this.worldCanvas.style.right = "0px";
          this.worldCanvas.style.width = clientWidth + 'px';
          // this.worldCanvas.style.top = agHeight + 'px';
          //
          // this.worldCanvas.style.top = "40px";
          // this.worldCanvas.style.height = "calc(100% - 40px)";

          if (this.worldCanvas.width !== clientWidth) {
              this.worldCanvas.width = clientWidth;
              this.setWidth(clientWidth);
          }
          if (this.worldCanvas.height !== clientHeight) {
              this.worldCanvas.height = clientHeight;
              this.setHeight(clientHeight);
          }


          this.children.forEach(function (child) {
              if (child.reactToWorldResize) {
                  child.reactToWorldResize(myself.bounds.copy());
              }
          });

      };

      // THIS SEEMS LIKE A HACK.
      // but this site is not edX....
      window.isEDX = false;
      window.onload = function () {
          $('#canvas-container').height(
              $(window).height() - $('#ag-header').outerHeight()
          );
          // console.log($('#ag-header').outerHeight(), $(window).height(), $('#canvas-container').height());
          $('#canvas-container').width($(window).width());
          $('#canvas-container').css({
              position: 'absolute'
          });
          var agHeight = $('#ag-header1').outerHeight() + $('#ag-header2').outerHeight();
          $('body').height($(window).height());
          world_canvas = document.getElementById('world');
          world = new WorldMorph(world_canvas);
          var ide = new IDE_Morph();
          ide.openIn(world);
          window.ide = ide;
          console.log(ide.stage.guid);
          // Start Snap Environment Loop
          loop();
          <% if @minitask.order == 1 %>
          $("#autograding_button").click(doExecAndDisplayQuizzes);
          <% else %>
          $("#autograding_button").click(doExecAndDisplayTests);
          <% end %>
          // var ide = world.children[0];

          window.assignmentID ='<%=@minitask.title%>';
          window.userID = '<%=@current_user.username%>';




          console.log('ide: ', ide);

          // ide.controlbar.color = controlbar.groupColor;
          instruction_left = ide.stage.left();
          instruction_width = clientWidth - ide.stage.left();
          var agHeight = $('#ag-header').outerHeight();
          instruction_top = ide.stage.bottom() + agHeight + 50;
          console.log('instruction_width: ', instruction_left);
          console.log('instruction_top: ', instruction_top);




          canvas_container = document.getElementById('canvas-container');
          var parent = canvas_container.parentNode;
          var wrapper = document.createElement('div');

          // set the wrapper as child (instead of the element)
          parent.replaceChild(wrapper, canvas_container);
          // set element as child of wrapper
          var instruction_canvas = document.createElement('div');

          instruction_canvas.id = 'bottom-right';
          instruction_canvas.style.position = "absolute";
          instruction_canvas.style.left = instruction_left+ 'px';
          // instruction_canvas.style.left = "15px";
          instruction_canvas.style.right =clientWidth + 'px';
          instruction_canvas.style.width = instruction_width + 'px';
          instruction_canvas.style.top = instruction_top +  'px';
          instruction_canvas.style.bottom =  '0px';

          instruction_canvas.innerHTML = "<%=escape_javascript @minitask.instruction.html_safe%>";
          wrapper.appendChild(instruction_canvas);
          wrapper.appendChild(canvas_container);







          if (window.onWorldLoaded) {
              window.onWorldLoaded();
          }

          // $("#autograding_button").click(doExecAndDisplayTests);
          world_canvas.addEventListener("mouseup", update_listener);
          left_canvas = document.getElementById('left');
          //
          // var doExecAndDisplayTests = function(event) {
          //     alert('doExecAndDisplay');
          // };


          // This is a link relative to /problems/N/
          ppxml_path = gon.ppxmlfile_path;
          loadTestJS();
          // The global id variable in set by the JS file.
          initializeSnapAdditions(world, id);
      };





      function loop() {
          requestAnimationFrame(loop);
          world.doOneCycle();
      }

      function loadTestJS() {
          var query = queryString.parse(location.hash.slice(1)),
              problem_js = query.test_file,
              tag;

          if (!problem_js) { return; }
          tag = document.createElement('script');
          // tag = document.createElement('null');

          tag.src = problem_js;
          // tag = problem_js;
          // console.log(tag);
          // tag = problem_js;
          tag.onload = function () {
              ppxml_path = gon.ppxmlfile_path;
              // console.log(starter_path)
              initializeSnapAdditions(world, id);
          };
          document.head.appendChild(tag);
      }

  </script>
<% end %>