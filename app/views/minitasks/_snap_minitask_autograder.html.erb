<style>
  body {
    background-color: linen;
  }

  h1 {
    color: maroon;
    /*margin-left: 15px;*/
    word-wrap: break-word;
  }

  h2 {
    font-size: 17px;
    font-weight: bold;
  }
  #bottom-right{
    position: absolute;
    background-color: white;
    z-index: 1;
    /*color: whitesmoke;*/
    font-size: 14px;
    margin: 20px;
    overflow: visible;
    padding-right: 50px;
    padding-left: 20px;
  }

  #bottom-right img{
    width:auto;
    height:auto;
    max-width: 80%;
    max-height: 80%;
  }

  img{
    user-drag: none;
    user-select: none;
    -moz-user-select: none;
    -webkit-user-drag: none;
    -webkit-user-select: none;
    -ms-user-select: none;
  }



  iframe {
    margin-top: 20px;
    border: 0
  }
  .onoffswitch {
    position: relative; width: 200px;
    -webkit-user-select:none; -moz-user-select:none; -ms-user-select: none;
  }
  .onoffswitch-checkbox {
    display: none;
  }
  .onoffswitch-label {
    display: block; overflow: hidden; cursor: pointer;
    border: 2px solid #999999; border-radius: 20px;
  }
  .onoffswitch-inner {
    display: block; width: 200%; margin-left: -100%;
    transition: margin 0.3s ease-in 0s;
  }
  .onoffswitch-inner:before, .onoffswitch-inner:after {
    display: block; float: left; width: 50%; height: 30px; padding: 0; line-height: 30px;
    font-size: 14px; color: white; font-family: Trebuchet, Arial, sans-serif; font-weight: bold;
    box-sizing: border-box;
  }
  .onoffswitch-inner:before {
    content: "Turn On Turbo Mode";
    padding-left: 10px;
    background-color: #34A7C1; color: #FFFFFF;
  }
  .onoffswitch-inner:after {
    content: "Back To Normal Speed";
    padding-right: 10px;
    background-color: #EEEEEE; color: #999999;
    text-align: right;
  }
  .onoffswitch-switch {
    display: block; width: 18px; margin: 6px;
    background: #FFFFFF;
    position: absolute; top: 0; bottom: 0;
    right: 166px;
    border: 2px solid #999999; border-radius: 20px;
    transition: all 0.3s ease-in 0s;
  }
  .onoffswitch-checkbox:checked + .onoffswitch-label .onoffswitch-inner {
    margin-left: 0;
  }
  .onoffswitch-checkbox:checked + .onoffswitch-label .onoffswitch-switch {
    right: 0px;
  }
</style>

<% content_for :head do %>
  <!-- NOTE: jQuery and _ are included in the Rails App  -->

  <!--  <script src='/autograder/ag-files/MiniTaskPopulate.js'></script>-->
  <!-- AG Snap Modifications -->
  <script src="/snap-path.js"></script>
  <script src="/autograder/ag-files/snap-ui-overrides.js"></script>

  <!-- Autograder custom display -->
  <link rel="stylesheet" type="text/css" href="/autograder/ag-files/AG_status_bar.css" />
  <link rel="stylesheet" type="text/css" href="/autograder/ag-files/hintstyle.css" />

  <!-- Main autograder components -->

  <script src='/autograder/ag-files/ag-util.js'></script>
  <script src='/autograder/ag-files/help-content.js'></script>
  <script src='/autograder/ag-files/spriteEventLog.js'></script>
  <script src='/autograder/ag-files/scriptAnalysis.js'></script>
  <script src='/autograder/ag-files/scriptMinitaskAnalysis.js'></script>

  <script src="/autograder/ag-files/AGMiniTaskAgent.js"></script>
  <script src='/autograder/ag-files/feedbackLog.js'></script>
  <script src="/autograder/ag-files/AGMiniTaskFormatting.js"></script>
  <!--  <script src="/autograder/ag-files/task-script.js"></script>-->


  <!-- Custom cloud access on localhost only. -->
  <% if Rails.env == 'development' %>
    <script src="/autograder/ag-files/snap-local-cloud.js"></script>
  <% end %>


  <body>
  <!--here is the content-->
  <!--<div id="left"><h1>Test</h1></div>-->

  </body>

  <!-- Load snap + AG additions, similar to snap.html -->
  <script>

      // Override Snap! / Morphic method to not take the full size of the window.
      // TODO: extract into AG function that builds this.
      // It should take in a width and height.
      WorldMorph.prototype.fillPage = function () {
          // //console.log('worldmorph fill page');
          var agHeight = $('#ag-header1').outerHeight() + $('#ag-header2').outerHeight();

          clientHeight = $(window).height() - agHeight,
              clientWidth = window.innerWidth,
              myself = this;

          // this.worldCanvas.style.position = "absolute";
          this.worldCanvas.style.position = "relative";
          this.worldCanvas.style.left = '0px';
          this.worldCanvas.style.right = "0px";
          this.worldCanvas.style.width = clientWidth + 'px';
          // this.worldCanvas.style.top = agHeight + 'px';
          //
          // this.worldCanvas.style.top = "40px";
          // this.worldCanvas.style.height = "calc(100% - 40px)";

          if (this.worldCanvas.width !== clientWidth) {
              this.worldCanvas.width = clientWidth;
              this.setWidth(clientWidth);
          }
          if (this.worldCanvas.height !== clientHeight) {
              this.worldCanvas.height = clientHeight;
              this.setHeight(clientHeight);
          }

          extend(IDE_Morph, 'reactToWorldResize', function(base, rect) {
              base.call(this, rect);
              try {
                  var instruction_canvas = document.getElementById('bottom-right');

                  instruction_left = this.stage.left();
                  instruction_width = clientWidth - this.stage.left();

                  instruction_canvas.id = 'bottom-right';
                  // instruction_canvas.style.backgroundcolor = 'white';
                  instruction_canvas.style.position = "absolute";
                  instruction_canvas.style.left = instruction_left+ 'px';
                  // instruction_canvas.style.left = "15px";
                  instruction_canvas.style.right =clientWidth + 'px';
                  instruction_canvas.style.width = instruction_width + 'px';
                  instruction_canvas.style.top = instruction_top +  'px';
                  instruction_canvas.style.bottom =  '0px';
              }
              catch(err) {
                  var instruction_canvas = document.createElement('div');
                  //console.log('ide: ', this);
                  clientWidth = window.innerWidth;
                  instruction_left = this.stage.left();
                  instruction_width = clientWidth - this.stage.left();
                  var agHeight = $('#ag-header').outerHeight();
                  instruction_top = this.stage.bottom() + agHeight + 50;
                  canvas_container = document.getElementById('canvas-container');
                  var parent = canvas_container.parentNode;
                  var wrapper = document.createElement('div');

                  // set the wrapper as child (instead of the element)
                  parent.replaceChild(wrapper, canvas_container);
                  // set element as child of wrapper


                  instruction_canvas.id = 'bottom-right';
                  // instruction_canvas.style.backgroundcolor = 'white';
                  instruction_canvas.style.position = "absolute";
                  instruction_canvas.style.left = instruction_left+ 'px';
                 // instruction_canvas.style.left = "15px";-->
                  instruction_canvas.style.right =clientWidth + 'px';
                  instruction_canvas.style.width = instruction_width + 'px';
                  instruction_canvas.style.top = instruction_top +  'px';
                  instruction_canvas.style.bottom =  '0px';

                  instruction_canvas.innerHTML = "<h2> Instruction: </h2><%=escape_javascript @minitask.instruction.html_safe%>";
                  <% if @minitask.title == "Zig-Zag3" %>
                  // if (window.assignmentID === 'Zig-Zag3') {
                      instruction_canvas.innerHTML += "<p>You can click the below 'Turn On Turbo Mode' to draw faster on the stage:</p>"
                      instruction_canvas.innerHTML += "<div class='onoffswitch'><input type='checkbox' name= 'onoffswitch' class='onoffswitch-checkbox' id='myonoffswitch' checked><label class= 'onoffswitch-label' for='myonoffswitch'><span class='onoffswitch-inner' onclick='toggleCheck()'></span><span class='onoffswitch-switch'></span></label></div>"
                  // }
                  <% end %>
                  wrapper.appendChild(instruction_canvas);
                  wrapper.appendChild(canvas_container);
              }

              // //console.log('ide: ', ide);

              // ide.controlbar.color = controlbar.groupColor;
              // ide = window.ide;

          });


          this.children.forEach(function (child) {
              if (child.reactToWorldResize) {
                  child.reactToWorldResize(myself.bounds.copy());
              }
          });

      };

      // THIS SEEMS LIKE A HACK.
      // but this site is not edX....
      window.isEDX = false;
      window.onload = function () {
          // //console.log('-----------window.onload------------------');
          $('#canvas-container').height(
              $(window).height() - $('#ag-header').outerHeight()
          );
          // //console.log($('#ag-header').outerHeight(), $(window).height(), $('#canvas-container').height());
          $('#canvas-container').width($(window).width());
          $('#canvas-container').css({
              position: 'absolute'
          });
          var agHeight = $('#ag-header1').outerHeight() + $('#ag-header2').outerHeight();
          $('body').height($(window).height());
          world_canvas = document.getElementById('world');
          world = new WorldMorph(world_canvas);
          var ide = new IDE_Morph();
          ide.openIn(world);
          window.ide = ide;
          window.currentStars = 0;
          ide.setBlocksScale(1.3);
          //console.log(ide.stage.guid);
          // Start Snap Environment Loop
          loop();
          <% if @minitask.order == 1 %>
          $("#autograding_button").click(doExecAndDisplayQuizzes);
          <% else %>
              var little_stars = document.createElement('div');
              little_stars.className = ('little-container');
              little_stars.id = 'little-stars';
              document.body.appendChild(little_stars);
              $("#little-stars").off('click').on('click', function(e){
                  //console.log('-----------------inside function e------------------');
                  if(e.handled !== true){
                      doExecAndDisplayTests(e);
                      e.handled = true;
                      //console.log('e.handled------------: ', e.handled);
                  }
              });




          $(document).on('click', '#test-button',function(e) {
              if(e.handled !== true) // This will prevent event triggering more then once
              {
                  alert('Clicked');
                  e.handled = true;
              }
          });

          <% end %>

          window.assignmentID ='<%=@minitask.title%>';
          window.userID = '<%=@current_user.username%>';




          // //console.log('ide: ', ide);

          // ide.controlbar.color = controlbar.groupColor;
          instruction_left = ide.stage.left();
          instruction_width = clientWidth - ide.stage.left();
          var agHeight = $('#ag-header').outerHeight();
          instruction_top = ide.stage.bottom() + agHeight + 50;



          if (window.onWorldLoaded) {
              window.onWorldLoaded();
          }

          // $("#autograding_button").click(doExecAndDisplayTests);
          world_canvas.addEventListener("mouseup", update_listener);
          left_canvas = document.getElementById('left');

          ppxml_path = gon.ppxmlfile_path;
          loadTestJS();
          // The global id variable in set by the JS file.
          initializeSnapAdditions(world, id);
      };





      function loop() {
          requestAnimationFrame(loop);
          world.doOneCycle();
      }

      function loadTestJS() {
          var query = queryString.parse(location.hash.slice(1)),
              problem_js = query.test_file,
              tag;

          if (!problem_js) { return; }
          tag = document.createElement('script');
          // tag = document.createElement('null');

          tag.src = problem_js;
          // tag = problem_js;
          // //console.log(tag);
          // tag = problem_js;
          tag.onload = function () {
              ppxml_path = gon.ppxmlfile_path;
              // //console.log(starter_path)
              initializeSnapAdditions(world, id);
          };
          document.head.appendChild(tag);
      }

      function toggleCheck() {
          if(document.getElementById("myonoffswitch").checked === true){
              turnOnFastTracking();
          } else {
              turnOffFastTracking();
          }
      }



  </script>



<% end %>